NAnt 0.91 (Build 0.91.4312.0; release; 22/10/2011)
Copyright (C) 2001-2011 Gerry Shaw
http://nant.sourceforge.net

Buildfile: file:///E:/Webroot/BLOGDEV/DesktopModules/Blog/_BuildSupport/CreateScript.build
Target framework: Microsoft .NET Framework 4.0
Target(s) specified: create.script 


create.script:

Loaded E:\Webroot\BLOGDEV\web.config
ConnectionString: Server=(local);Database=BLOGDEV;uid=test;pwd=test;
ObjectQualifier : BLOGDEV_
DatabaseOwner   : dbo
FullPattern     : (?<owner>\[?dbo\]?\.)?\[?(?<prefix>\w*)(?<dnnqualifier>BLOGDEV_)(?<modqualifier>Blog_)(?<name>\w+)\]?|(?<owner>\[?dbo\]?\.)\[?(?<prefix>\w*)(?<dnnqualifier>BLOGDEV_)(?<modqualifier>Blog_)?(?<name>\w+)\]?|\[?(?<dnnqualifier>BLOGDEV_)(?<name>\w+)\]?

Could not create original script output stream to E:\Webroot\DNNBLOG5DEV3\DesktopModules\Blog\_BuildSupport\OriginalScript.sql
Create Install Script
TABLES
Adding BLOGDEV_Blog_BlogLocalization
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogLocalization]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_BlogLocalization](
	[BlogID] [int] NOT NULL,
	[Locale] [nvarchar](10) NOT NULL,
	[Title] [nvarchar](255) NOT NULL,
	[Description] [nvarchar](2000) NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_BlogLocalization] PRIMARY KEY CLUSTERED 
(
	[BlogID] ASC,
	[Locale] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO


Adding BLOGDEV_Blog_BlogPermissions
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogPermissions]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_BlogPermissions](
	[AllowAccess] [bit] NULL,
	[BlogId] [int] NOT NULL,
	[Expires] [datetime] NULL,
	[PermissionId] [int] NOT NULL,
	[RoleId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_BlogPermissions] PRIMARY KEY CLUSTERED 
(
	[BlogId] ASC,
	[PermissionId] ASC,
	[RoleId] ASC,
	[UserId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogPermissions]') AND name = N'BLOGDEV_IX_Blog_BlogPermissions_PermissionId')
CREATE NONCLUSTERED INDEX [BLOGDEV_IX_Blog_BlogPermissions_PermissionId] ON [dbo].[BLOGDEV_Blog_BlogPermissions] 
(
	[PermissionId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogPermissions]') AND name = N'BLOGDEV_IX_Blog_BlogPermissions_RoleId')
CREATE NONCLUSTERED INDEX [BLOGDEV_IX_Blog_BlogPermissions_RoleId] ON [dbo].[BLOGDEV_Blog_BlogPermissions] 
(
	[RoleId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO


Adding BLOGDEV_Blog_Blogs
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Blogs]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_Blogs](
	[BlogID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[Title] [nvarchar](255) NOT NULL,
	[Description] [nvarchar](2000) NULL,
	[Image] [nvarchar](255) NULL,
	[Locale] [nvarchar](50) NOT NULL,
	[FullLocalization] [bit] NULL,
	[Published] [bit] NOT NULL,
	[IncludeImagesInFeed] [bit] NOT NULL,
	[IncludeAuthorInFeed] [bit] NOT NULL,
	[Syndicated] [bit] NOT NULL,
	[SyndicationEmail] [nvarchar](255) NULL,
	[Copyright] [nvarchar](2000) NULL,
	[MustApproveGhostPosts] [bit] NOT NULL,
	[PublishAsOwner] [bit] NOT NULL,
	[OwnerUserId] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_Blogs_BlogID] PRIMARY KEY CLUSTERED 
(
	[BlogID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Blogs]') AND name = N'IX_BLOGDEV_Blog_Blogs_PortalID')
CREATE NONCLUSTERED INDEX [IX_BLOGDEV_Blog_Blogs_PortalID] ON [dbo].[BLOGDEV_Blog_Blogs] 
(
	[ModuleID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO


Adding BLOGDEV_Blog_CommentKarmas
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_CommentKarmas]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_CommentKarmas](
	[CommentId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Karma] [int] NOT NULL,
	[Datime] [datetime] NOT NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_CommentReports] PRIMARY KEY CLUSTERED 
(
	[CommentId] ASC,
	[UserId] ASC,
	[Karma] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO


Adding BLOGDEV_Blog_Comments
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Comments]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_Comments](
	[CommentID] [int] IDENTITY(1,1) NOT NULL,
	[ContentItemId] [int] NOT NULL,
	[ParentId] [int] NULL,
	[Comment] [nvarchar](max) NOT NULL,
	[Approved] [bit] NULL,
	[Author] [nvarchar](50) NULL,
	[Website] [nvarchar](255) NULL,
	[Email] [nvarchar](255) NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_Comments_CommentID] PRIMARY KEY CLUSTERED 
(
	[CommentID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO


Adding BLOGDEV_Blog_PostLocalization
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_PostLocalization]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_PostLocalization](
	[ContentItemId] [int] NOT NULL,
	[Locale] [nvarchar](10) NOT NULL,
	[Title] [nvarchar](255) NOT NULL,
	[Summary] [nvarchar](max) NULL,
	[LocalizedContentItemId] [int] NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_PostLocalization] PRIMARY KEY CLUSTERED 
(
	[ContentItemId] ASC,
	[Locale] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO


Adding BLOGDEV_Blog_Posts
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_Posts](
	[ContentItemId] [int] NOT NULL,
	[BlogID] [int] NOT NULL,
	[Title] [nvarchar](255) NOT NULL,
	[Summary] [nvarchar](max) NULL,
	[Image] [nvarchar](255) NULL,
	[Published] [bit] NOT NULL,
	[PublishedOnDate] [datetime] NOT NULL,
	[AllowComments] [bit] NULL,
	[DisplayCopyright] [bit] NOT NULL,
	[Copyright] [nvarchar](255) NULL,
	[Locale] [nvarchar](50) NOT NULL,
	[ViewCount] [int] NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_Entries] PRIMARY KEY CLUSTERED 
(
	[ContentItemId] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]') AND name = N'IX_BLOGDEV_Blog_Entries_AddedDate')
CREATE NONCLUSTERED INDEX [IX_BLOGDEV_Blog_Entries_AddedDate] ON [dbo].[BLOGDEV_Blog_Posts] 
(
	[PublishedOnDate] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]') AND name = N'IX_BLOGDEV_Blog_Entries_BlogID')
CREATE NONCLUSTERED INDEX [IX_BLOGDEV_Blog_Entries_BlogID] ON [dbo].[BLOGDEV_Blog_Posts] 
(
	[BlogID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
GO


Adding BLOGDEV_Blog_TermLocalization
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_TermLocalization]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_TermLocalization](
	[TermID] [int] NOT NULL,
	[Locale] [nvarchar](50) NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](2500) NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_TermLocalizations] PRIMARY KEY CLUSTERED 
(
	[TermID] ASC,
	[Locale] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO


Adding BLOGDEV_Blog_Terms
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Terms]') AND type in (N'U'))
BEGIN
CREATE TABLE [dbo].[BLOGDEV_Blog_Terms](
	[TermID] [int] NOT NULL,
	[ViewOrder] [int] NOT NULL,
 CONSTRAINT [PK_BLOGDEV_Blog_Terms] PRIMARY KEY CLUSTERED 
(
	[TermID] ASC
)WITH (STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO


STRUCTURE
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_BlogLocalization_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_BlogLocalization]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_BlogLocalization_Blogs] FOREIGN KEY([BlogID])
REFERENCES [BLOGDEV_Blog_Blogs] ([BlogID])
ON UPDATE CASCADE
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_BlogLocalization_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_BlogLocalization] CHECK CONSTRAINT [FK_BLOGDEV_Blog_BlogLocalization_Blogs]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_BlogPermissions_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogPermissions]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_BlogPermissions]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_BlogPermissions_Blogs] FOREIGN KEY([BlogId])
REFERENCES [BLOGDEV_Blog_Blogs] ([BlogID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_BlogPermissions_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogPermissions]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_BlogPermissions] CHECK CONSTRAINT [FK_BLOGDEV_Blog_BlogPermissions_Blogs]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Blogs_Modules]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Blogs]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Blogs]  WITH NOCHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_Blogs_Modules] FOREIGN KEY([ModuleID])
REFERENCES [BLOGDEV_Modules] ([ModuleID])
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Blogs_Modules]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Blogs]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Blogs] NOCHECK CONSTRAINT [FK_BLOGDEV_Blog_Blogs_Modules]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_CommentReports_Comments]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_CommentKarmas]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_CommentKarmas]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_CommentReports_Comments] FOREIGN KEY([CommentId])
REFERENCES [BLOGDEV_Blog_Comments] ([CommentID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_CommentReports_Comments]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_CommentKarmas]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_CommentKarmas] CHECK CONSTRAINT [FK_BLOGDEV_Blog_CommentReports_Comments]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Comments]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Comments]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Comments]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_Comments] FOREIGN KEY([ContentItemId])
REFERENCES [BLOGDEV_Blog_Posts] ([ContentItemId])
ON UPDATE CASCADE
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Comments]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Comments]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Comments] CHECK CONSTRAINT [FK_BLOGDEV_Blog_Comments]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_PostLocalization_ContentItems]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_PostLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_PostLocalization]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_PostLocalization_ContentItems] FOREIGN KEY([ContentItemId])
REFERENCES [BLOGDEV_ContentItems] ([ContentItemID])
ON UPDATE CASCADE
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_PostLocalization_ContentItems]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_PostLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_PostLocalization] CHECK CONSTRAINT [FK_BLOGDEV_Blog_PostLocalization_ContentItems]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Entries_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Posts]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_Entries_Blogs] FOREIGN KEY([BlogID])
REFERENCES [BLOGDEV_Blog_Blogs] ([BlogID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Entries_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Posts] CHECK CONSTRAINT [FK_BLOGDEV_Blog_Entries_Blogs]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Entries_ContentItems]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Posts]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_Entries_ContentItems] FOREIGN KEY([ContentItemId])
REFERENCES [BLOGDEV_ContentItems] ([ContentItemID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Entries_ContentItems]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Posts] CHECK CONSTRAINT [FK_BLOGDEV_Blog_Entries_ContentItems]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_TermLocalization_Taxonomy_Terms]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_TermLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_TermLocalization]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_TermLocalization_Taxonomy_Terms] FOREIGN KEY([TermID])
REFERENCES [BLOGDEV_Taxonomy_Terms] ([TermID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_TermLocalization_Taxonomy_Terms]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_TermLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_TermLocalization] CHECK CONSTRAINT [FK_BLOGDEV_Blog_TermLocalization_Taxonomy_Terms]
GO


IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Terms_Terms]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Terms]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Terms]  WITH CHECK ADD  CONSTRAINT [FK_BLOGDEV_Blog_Terms_Terms] FOREIGN KEY([TermID])
REFERENCES [BLOGDEV_Taxonomy_Terms] ([TermID])
ON DELETE CASCADE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Terms_Terms]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Terms]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Terms] CHECK CONSTRAINT [FK_BLOGDEV_Blog_Terms_Terms]
GO


TRIGGERS
FUNCTIONS
Adding BLOGDEV_Blog_BlogList
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogList]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[BLOGDEV_Blog_BlogList]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE FUNCTION [dbo].[BLOGDEV_Blog_BlogList]
 (@Locale NVARCHAR(10))
RETURNS TABLE
AS

RETURN
(SELECT 
  b.*,
  bl.Locale AS AltLocale, bl.Title AS AltTitle, bl.[Description] AS AltDescription
 FROM dbo.BLOGDEV_vw_Blog_Blogs AS b
  LEFT OUTER JOIN dbo.BLOGDEV_Blog_BlogLocalization AS bl ON b.BlogID = bl.BlogID AND bl.Locale=@Locale)

GO


Adding BLOGDEV_Blog_PostList
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_PostList]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[BLOGDEV_Blog_PostList]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE FUNCTION [dbo].[BLOGDEV_Blog_PostList]
 (@Locale NVARCHAR(10))
RETURNS TABLE
AS

RETURN
(SELECT
  p.*, 
  ci.CreatedByUserID, ci.CreatedOnDate, ci.LastModifiedByUserID, 
  ci.LastModifiedOnDate, ci.[Content], ci.ContentTypeID, ci.TabID, 
  ci.ModuleID, ci.ContentKey, ci.Indexed,
  u.Username, u.Email, u.DisplayName,
  pl.Locale AS AltLocale, pl.Title AS AltTitle, pl.Summary AS AltSummary, lci.Content AS AltContent
 FROM dbo.BLOGDEV_Blog_Posts AS p
  INNER JOIN dbo.BLOGDEV_ContentItems AS ci ON p.ContentItemId = ci.ContentItemID
  INNER JOIN dbo.BLOGDEV_Users AS u ON ci.CreatedByUserID = u.UserID
  LEFT OUTER JOIN dbo.BLOGDEV_Blog_PostLocalization AS pl ON ci.ContentItemID = pl.ContentItemId AND pl.Locale=@Locale
  LEFT OUTER JOIN dbo.BLOGDEV_ContentItems lci ON pl.LocalizedContentItemId=lci.ContentItemID)

GO


Adding BLOGDEV_Blog_Split
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Split]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[BLOGDEV_Blog_Split]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE FUNCTION [dbo].[BLOGDEV_Blog_Split] (@s NVARCHAR(4000), @sep CHAR(1))
RETURNS table
AS
RETURN (
    WITH Pieces(pn, start, stop) AS (
      SELECT 1, 1, CHARINDEX(@sep, @s)
      UNION ALL
      SELECT pn + 1, stop + 1, CHARINDEX(@sep, @s, stop + 1)
      FROM Pieces
      WHERE stop > 0
    )
    SELECT pn,
      SUBSTRING(@s, start, CASE WHEN stop > 0 THEN stop-start ELSE 512 END) AS s
    FROM Pieces
  )

GO


Adding BLOGDEV_Blog_TermList
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_TermList]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[BLOGDEV_Blog_TermList]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE FUNCTION [dbo].[BLOGDEV_Blog_TermList]
 (@Locale NVARCHAR(10))
RETURNS TABLE
AS

RETURN
(SELECT
  t.*,
  bt.ViewOrder,
  tl.Locale AS AltLocale, tl.Name AS AltName, tl.Description AS AltDescription
 FROM dbo.BLOGDEV_Taxonomy_Terms AS t
  LEFT OUTER JOIN dbo.BLOGDEV_Blog_Terms AS bt ON bt.TermID=t.TermID
  LEFT OUTER JOIN dbo.BLOGDEV_Blog_TermLocalization AS tl ON t.TermID = tl.TermID AND tl.Locale=@Locale)

GO


VIEWS
Adding BLOGDEV_vw_Blog_BlogPermissions
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_vw_Blog_BlogPermissions]'))
DROP VIEW [dbo].[BLOGDEV_vw_Blog_BlogPermissions]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE VIEW dbo.BLOGDEV_vw_Blog_BlogPermissions
AS
SELECT     bp.AllowAccess, bp.BlogId, bp.Expires, bp.PermissionId, bp.RoleId, bp.UserId, ISNULL(u.Username, N'') AS Username, ISNULL(u.DisplayName, N'') AS DisplayName, 
                      ISNULL(r.RoleName, N'') AS RoleName
FROM         dbo.BLOGDEV_Blog_BlogPermissions AS bp LEFT OUTER JOIN
                      dbo.BLOGDEV_Roles AS r ON bp.RoleId = r.RoleID LEFT OUTER JOIN
                      dbo.BLOGDEV_Users AS u ON bp.UserId = u.UserID

GO


Adding BLOGDEV_vw_Blog_Blogs
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_vw_Blog_Blogs]'))
DROP VIEW [dbo].[BLOGDEV_vw_Blog_Blogs]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE VIEW dbo.BLOGDEV_vw_Blog_Blogs
AS
SELECT     b.BlogID, b.ModuleID, b.Title, b.Description, b.Image, b.Locale, b.FullLocalization, b.Published, b.IncludeImagesInFeed, b.IncludeAuthorInFeed, b.Syndicated, 
                      b.SyndicationEmail, b.Copyright, b.MustApproveGhostPosts, b.PublishAsOwner, b.OwnerUserId, b.CreatedByUserID, b.CreatedOnDate, b.LastModifiedByUserID, 
                      b.LastModifiedOnDate, u.DisplayName, u.Email, u.Username, p.NrPosts, p.LastPublishDate, p.NrViews, p.FirstPublishDate
FROM         dbo.BLOGDEV_Blog_Blogs AS b INNER JOIN
                      dbo.BLOGDEV_Users AS u ON b.OwnerUserId = u.UserID LEFT OUTER JOIN
                          (SELECT     BlogID, COUNT(ContentItemId) AS NrPosts, SUM(ViewCount) AS NrViews, MAX(PublishedOnDate) AS LastPublishDate, MIN(PublishedOnDate) 
                                                   AS FirstPublishDate
                            FROM          dbo.BLOGDEV_Blog_Posts AS posts
                            GROUP BY BlogID, Published
                            HAVING      (Published = 1)) AS p ON p.BlogID = b.BlogID

GO


Adding BLOGDEV_vw_Blog_Comments
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_vw_Blog_Comments]'))
DROP VIEW [dbo].[BLOGDEV_vw_Blog_Comments]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE VIEW dbo.BLOGDEV_vw_Blog_Comments
AS
SELECT     c.CommentID, c.ContentItemId, c.ParentId, c.Comment, c.Approved, c.Author, c.Website, c.Email, c.CreatedByUserID, c.CreatedOnDate, c.LastModifiedByUserID, 
                      c.LastModifiedOnDate, ISNULL(u.Username, '') AS Username, ISNULL(u.DisplayName, c.Author) AS DisplayName,
                          (SELECT     COUNT(*) AS Expr1
                            FROM          dbo.BLOGDEV_Blog_CommentKarmas
                            WHERE      (c.CommentID = c.CommentID) AND (Karma = 0)) AS Likes,
                          (SELECT     COUNT(*) AS Expr1
                            FROM          dbo.BLOGDEV_Blog_CommentKarmas AS BLOGDEV_Blog_CommentKarmas_2
                            WHERE      (c.CommentID = c.CommentID) AND (Karma = 1)) AS Dislikes,
                          (SELECT     COUNT(*) AS Expr1
                            FROM          dbo.BLOGDEV_Blog_CommentKarmas AS BLOGDEV_Blog_CommentKarmas_1
                            WHERE      (c.CommentID = c.CommentID) AND (Karma = 2)) AS Reports
FROM         dbo.BLOGDEV_Blog_Comments AS c LEFT OUTER JOIN
                      dbo.BLOGDEV_Users AS u ON c.CreatedByUserID = u.UserID

GO


Adding BLOGDEV_vw_Blog_Posts
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_vw_Blog_Posts]'))
DROP VIEW [dbo].[BLOGDEV_vw_Blog_Posts]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE VIEW dbo.BLOGDEV_vw_Blog_Posts
AS
SELECT     p.ContentItemId, p.BlogID, p.Title, p.Summary, p.Image, p.Published, p.PublishedOnDate, p.AllowComments, p.DisplayCopyright, p.Copyright, p.Locale, p.ViewCount, 
                      ci.[Content], ci.CreatedByUserID, ci.CreatedOnDate, ci.LastModifiedByUserID, ci.LastModifiedOnDate, pl.Locale AS Expr1, pl.Title AS Expr2, pl.Summary AS Expr3, 
                      pl.LocalizedContentItemId, u.Username, u.Email, u.DisplayName
FROM         dbo.BLOGDEV_Blog_Posts AS p LEFT OUTER JOIN
                      dbo.BLOGDEV_Blog_PostLocalization AS pl ON p.ContentItemId = pl.ContentItemId INNER JOIN
                      dbo.BLOGDEV_ContentItems AS ci ON p.ContentItemId = ci.ContentItemID AND pl.ContentItemId = ci.ContentItemID INNER JOIN
                      dbo.BLOGDEV_Users AS u ON ci.CreatedByUserID = u.UserID

GO


SPROCS
Adding BLOGDEV_Blog_AddBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddBlog]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE dbo.BLOGDEV_Blog_AddBlog
 @ModuleID INT, 
 @Copyright NVARCHAR (2000), 
 @Description NVARCHAR (2000), 
 @FullLocalization BIT, 
 @Image NVARCHAR (255), 
 @IncludeAuthorInFeed BIT, 
 @IncludeImagesInFeed BIT, 
 @Locale NVARCHAR (50), 
 @MustApproveGhostPosts BIT, 
 @OwnerUserId INT, 
 @PublishAsOwner BIT, 
 @Published BIT, 
 @Syndicated BIT, 
 @SyndicationEmail NVARCHAR (255), 
 @Title NVARCHAR (255), 
 @CreatedByUser INT
AS

INSERT INTO dbo.BLOGDEV_Blog_Blogs (
 [ModuleID],
 [Copyright],
 [CreatedByUserID],
 [CreatedOnDate],
 [Description],
 [FullLocalization],
 [Image],
 [IncludeAuthorInFeed],
 [IncludeImagesInFeed],
 [LastModifiedByUserID],
 [LastModifiedOnDate],
 [Locale],
 [MustApproveGhostPosts],
 [OwnerUserId],
 [PublishAsOwner],
 [Published],
 [Syndicated],
 [SyndicationEmail],
 [Title]
)
 VALUES ( @ModuleID, @Copyright, @CreatedByUser, GETDATE(), @Description, @FullLocalization, @Image, @IncludeAuthorInFeed, @IncludeImagesInFeed, @CreatedByUser, GETDATE(), @Locale, @MustApproveGhostPosts, @OwnerUserId, @PublishAsOwner, @Published, @Syndicated, @SyndicationEmail, @Title)


select SCOPE_IDENTITY()
GO


Adding BLOGDEV_Blog_AddBlogPermission
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddBlogPermission]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddBlogPermission]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE dbo.BLOGDEV_Blog_AddBlogPermission
 @AllowAccess BIT, 
 @BlogId INT, 
 @Expires DATETIME, 
 @PermissionId INT, 
 @RoleId INT, 
 @UserId INT

AS

INSERT INTO dbo.BLOGDEV_Blog_BlogPermissions (
 [AllowAccess],
 [BlogId],
 [Expires],
 [PermissionId],
 [RoleId],
 [UserId])
VALUES (
 @AllowAccess,
 @BlogId,
 @Expires,
 @PermissionId,
 @RoleId,
 @UserId)
GO


Adding BLOGDEV_Blog_AddComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddComment]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_AddComment]
 @Approved BIT, 
 @Author NVARCHAR (50), 
 @Comment NVARCHAR (MAX), 
 @ContentItemId INT, 
 @Email NVARCHAR (255), 
 @ParentId INT, 
 @Website NVARCHAR (255), 
 @CreatedByUser INT
AS

INSERT INTO dbo.BLOGDEV_Blog_Comments (
 [Approved],
 [Author],
 [Comment],
 [ContentItemId],
 [CreatedByUserID],
 [CreatedOnDate],
 [Email],
 [LastModifiedByUserID],
 [LastModifiedOnDate],
 [ParentId],
 [Website]
)
 VALUES ( @Approved, @Author, @Comment, @ContentItemId, @CreatedByUser, GETDATE(), @Email, @CreatedByUser, GETDATE(), @ParentId, @Website)


select SCOPE_IDENTITY()
GO


Adding BLOGDEV_Blog_AddCommentKarma
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddCommentKarma]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddCommentKarma]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_AddCommentKarma]
 @CommentId INT, 
 @UserId INT,
 @Karma INT
AS

DECLARE @Res INT
SET @Res = -1;

IF NOT EXISTS (SELECT * FROM dbo.BLOGDEV_Blog_CommentKarmas WHERE CommentId=@CommentId AND UserId=@UserId AND Karma=@Karma)
BEGIN
 INSERT INTO dbo.BLOGDEV_Blog_CommentKarmas
  (CommentId, UserId, Karma, Datime)
 VALUES
  (@CommentId, @UserId, @Karma, GETDATE());
 SET @Res = @CommentId;
END

SELECT @Res

GO


Adding BLOGDEV_Blog_AddPost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddPost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddPost]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_AddPost]
 @AllowComments BIT, 
 @BlogID INT,
 @Content NVARCHAR(MAX),
 @Copyright NVARCHAR (255), 
 @DisplayCopyright BIT, 
 @Image NVARCHAR (255), 
 @Locale VARCHAR (10), 
 @Published BIT, 
 @PublishedOnDate DATETIME, 
 @Summary NVARCHAR (MAX),
 @TermIds NVARCHAR(1000),
 @Title NVARCHAR (255),
 @ViewCount INT, 
 @CreatedByUser INT
AS

DECLARE @ContentTypeID INT
SET @ContentTypeID = (SELECT TOP 1 ContentTypeID FROM dbo.BLOGDEV_ContentTypes WHERE ContentType='DNN_Blog_Post')
DECLARE @ModuleId INT
SET @ModuleId = (SELECT TOP 1 ModuleId FROM dbo.BLOGDEV_Blog_Blogs WHERE BlogID=@BlogID)

DECLARE @Tmp TABLE (ContentItemID INT)
INSERT INTO @Tmp
EXEC dbo.BLOGDEV_AddContentItem @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @CreatedByUser;
DECLARE @ContentItemID INT
SET @ContentItemID = (SELECT TOP 1 ContentItemID FROM @Tmp)

INSERT INTO dbo.BLOGDEV_Blog_Posts (
 [AllowComments],
 [BlogID],
 [ContentItemId],
 [Copyright],
 [DisplayCopyright],
 [Image],
 [Locale],
 [Published],
 [PublishedOnDate],
 [Summary],
 [Title],
 [ViewCount]
)
 VALUES (  @AllowComments, @BlogID, @ContentItemID, @Copyright, @DisplayCopyright, @Image, @Locale, @Published, @PublishedOnDate, @Summary, @Title, @ViewCount);

IF @TermIds<>''
BEGIN
 DECLARE @ids TABLE (s NVARCHAR(512))
 INSERT INTO @ids (s) SELECT s FROM dbo.BLOGDEV_Blog_Split(@TermIds,';');

 INSERT INTO dbo.BLOGDEV_ContentItems_Tags ([ContentItemID], [TermID])
 SELECT @ContentItemID, CAST(i.s AS INT)
 FROM @ids i;
END

SELECT @ContentItemID


GO


Adding BLOGDEV_Blog_AddPostView
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddPostView]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddPostView]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_AddPostView]
 @ContentTypeID INT
AS

UPDATE dbo.BLOGDEV_Blog_Posts
SET [ViewCount] = ISNULL([ViewCount],0) + 1
WHERE [ContentItemId]=@ContentTypeID


GO


Adding BLOGDEV_Blog_ApproveComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_ApproveComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_ApproveComment]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_ApproveComment]
 @CommentId INT
AS

UPDATE dbo.BLOGDEV_Blog_Comments
SET Approved=1
WHERE CommentID=@CommentId



GO


Adding BLOGDEV_Blog_DeleteBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_DeleteBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_DeleteBlog]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE dbo.BLOGDEV_Blog_DeleteBlog
 @BlogID INT
AS

DELETE FROM dbo.BLOGDEV_Blog_Blogs
WHERE
 [BlogID] = @BlogID
GO


Adding BLOGDEV_Blog_DeleteBlogPermissions
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_DeleteBlogPermissions]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_DeleteBlogPermissions]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE PROCEDURE [dbo].[BLOGDEV_Blog_DeleteBlogPermissions] 
 @BlogId INT
AS
BEGIN
DELETE FROM BLOGDEV_Blog_BlogPermissions
WHERE BlogId=@BlogId
END

GO


Adding BLOGDEV_Blog_DeleteComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_DeleteComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_DeleteComment]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE dbo.BLOGDEV_Blog_DeleteComment
 @CommentID INT
AS

DELETE FROM dbo.BLOGDEV_Blog_Comments
WHERE
 [CommentID] = @CommentID
GO


Adding BLOGDEV_Blog_DeletePost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_DeletePost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_DeletePost]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_DeletePost]
 @ContentItemId INT
AS

DELETE FROM dbo.BLOGDEV_ContentItems
WHERE
 ContentItemId = @ContentItemId;

DELETE FROM dbo.BLOGDEV_Blog_Posts
WHERE
 ContentItemId = @ContentItemId;
 
GO


Adding BLOGDEV_Blog_GetBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlog]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetBlog]
 @BlogId INT,
 @UserId INT,
 @Locale NVARCHAR(10)
AS
BEGIN
SELECT
 b.*,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId=0) AS CanEdit,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId=1) AS CanAdd,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId=2) AS CanApprove
 
FROM dbo.BLOGDEV_Blog_BlogList(@Locale) b
 WHERE b.BlogID=@BlogId
END

GO


Adding BLOGDEV_Blog_GetBlogCalendar
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlogCalendar]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogCalendar]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogCalendar]
 @ModuleId INT,
 @BlogId INT,
 @Locale NVARCHAR(10)
AS

SELECT
 PostMonth, 
 PostYear,
 COUNT(*) PostCount,
 SUM(ViewCount) ViewCount
FROM
(SELECT
  MONTH(p.PublishedOnDate) PostMonth, YEAR(p.PublishedOnDate) PostYear, p.ViewCount
 FROM dbo.BLOGDEV_Blog_Posts p
 INNER JOIN dbo.BLOGDEV_Blog_Blogs b ON b.BlogID=p.BlogID
 WHERE
  p.Published=1 
  AND (p.BlogID=@BlogId OR @BlogId=-1) 
  AND b.ModuleID=@ModuleId
  AND (@Locale IS NULL OR ISNULL(p.Locale, b.Locale)=@Locale)) pd
GROUP BY PostYear, PostMonth
ORDER BY PostYear DESC, PostMonth DESC

GO


Adding BLOGDEV_Blog_GetBlogLocalizations
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlogLocalizations]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogLocalizations]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogLocalizations]
 @BlogId INT
AS
BEGIN
SELECT
 bl.*
FROM dbo.BLOGDEV_Blog_BlogLocalization bl
WHERE bl.BlogID=@BlogId
END

GO


Adding BLOGDEV_Blog_GetBlogPermissionsByBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlogPermissionsByBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogPermissionsByBlog]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogPermissionsByBlog]
 @BlogId INT
AS
BEGIN
SELECT bp.*
FROM BLOGDEV_vw_Blog_BlogPermissions bp
WHERE bp.BlogId=@BlogId
END

GO


Adding BLOGDEV_Blog_GetBlogsByModule
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlogsByModule]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogsByModule]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogsByModule]
 @ModuleId INT,
 @UserId INT,
 @Locale NVARCHAR(10)
AS
BEGIN
SELECT
 b.*,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId=0) AS CanEdit,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId=1) AS CanAdd,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId=2) AS CanApprove
 
FROM dbo.BLOGDEV_Blog_BlogList(@Locale) b
WHERE b.ModuleID=@ModuleId
END

GO


Adding BLOGDEV_Blog_GetComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetComment]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE dbo.BLOGDEV_Blog_GetComment
 @CommentID INT
AS

SELECT
 *
FROM
 dbo.BLOGDEV_vw_Blog_Comments
WHERE
 [CommentID] = @CommentID
GO


Adding BLOGDEV_Blog_GetCommentsByContentItem
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetCommentsByContentItem]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetCommentsByContentItem]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetCommentsByContentItem]
 @ContentItemId INT,
 @IncludeNonApproved BIT
AS

SELECT
 c.*
FROM
 dbo.BLOGDEV_vw_Blog_Comments c
WHERE
 c.ContentItemId = @ContentItemId
 AND (c.Approved = 1 OR @IncludeNonApproved = 1)
ORDER BY
 c.CreatedOnDate DESC
GO


Adding BLOGDEV_Blog_GetCommentsByModuleId
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetCommentsByModuleId]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetCommentsByModuleId]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetCommentsByModuleId]
 @ModuleId INT
AS

SELECT
 c.*
FROM
 dbo.BLOGDEV_vw_Blog_Comments c
 INNER JOIN dbo.BLOGDEV_ContentItems ci ON ci.ContentItemID=c.ContentItemId
WHERE
 ci.ModuleID=@ModuleId
ORDER BY
 c.CreatedOnDate DESC

GO


Adding BLOGDEV_Blog_GetPost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPost]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetPost]
 @ContentItemId INT,
 @ModuleId INT,
 @Locale NVARCHAR(10)
AS

SELECT
 p.*,
 (SELECT COUNT(c.CommentID) FROM dbo.BLOGDEV_Blog_Comments c WHERE c.ContentItemId=p.ContentItemId AND c.Approved=1) AS NrComments
FROM
 dbo.BLOGDEV_Blog_PostList(@Locale) p
WHERE
 p.[ContentItemId] = @ContentItemId
 AND p.ModuleId = @ModuleId
 
GO


Adding BLOGDEV_Blog_GetPostLocalizations
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPostLocalizations]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPostLocalizations]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetPostLocalizations]
 @ContentItemId INT
AS

SELECT
 pl.*,
 lci.Content
FROM
 dbo.BLOGDEV_Blog_PostLocalization pl
  LEFT OUTER JOIN dbo.BLOGDEV_ContentItems lci ON pl.LocalizedContentItemId=lci.ContentItemID
WHERE
 pl.[ContentItemId] = @ContentItemId
 
GO


Adding BLOGDEV_Blog_GetPosts
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPosts]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetPosts]
 @ModuleId INT,
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @UserId INT,
 @UserIsAdmin BIT,
 @Published INT,
 @LimitToLocale NVARCHAR(10),
 @EndDate DATETIME,
 @AuthorUserId INT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS

DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC dbo.BLOGDEV_CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;

DECLARE @Blogs TABLE (
	[BlogID] INT,
	[Locale] VARCHAR(10),
	[HasPrivilege] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
 b.Locale,
(SELECT COUNT(*)
 FROM dbo.BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM dbo.BLOGDEV_UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId IN (0,1,2)) AS [HasPrivilege]
FROM dbo.BLOGDEV_Blog_Blogs b
WHERE b.ModuleID=@ModuleId;

SELECT
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM dbo.BLOGDEV_Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR @UserIsAdmin=1 OR p.CreatedByUserId=@UserId OR b.HasPrivilege>0)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;

SELECT COUNT (*) AS TotalRecords
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR @UserIsAdmin=1 OR p.CreatedByUserId=@UserId OR b.HasPrivilege>0)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)


GO


Adding BLOGDEV_Blog_GetPostsByBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPostsByBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPostsByBlog]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetPostsByBlog]
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS

DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC dbo.BLOGDEV_CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;

SELECT 
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM dbo.BLOGDEV_Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;

SELECT COUNT (*) AS TotalRecords
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)


GO


Adding BLOGDEV_Blog_GetPostsByTerm
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPostsByTerm]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPostsByTerm]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetPostsByTerm]
 @ModuleId INT,
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @UserId INT,
 @UserIsAdmin BIT,
 @TermID INT,
 @Published INT,
 @LimitToLocale NVARCHAR(10),
 @EndDate DATETIME,
 @AuthorUserId INT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS

DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC dbo.BLOGDEV_CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;

DECLARE @Blogs TABLE (
 [BlogID] INT,
 [Locale] VARCHAR(10),
 [HasPrivilege] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
 b.Locale,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId IN (0,1,2)) AS [HasPrivilege]
FROM BLOGDEV_Blog_Blogs b
WHERE b.ModuleID=@ModuleId;

SELECT 
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM dbo.BLOGDEV_Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
 INNER JOIN dbo.BLOGDEV_ContentItems_Tags t ON t.ContentItemID=p.ContentItemId AND t.TermID=@TermID
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR @UserIsAdmin=1 OR p.CreatedByUserId=@UserId OR b.HasPrivilege>0)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;

SELECT COUNT (*) AS TotalRecords
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
 INNER JOIN dbo.BLOGDEV_ContentItems_Tags t ON t.ContentItemID=p.ContentItemId AND t.TermID=@TermID
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR @UserIsAdmin=1 OR p.CreatedByUserId=@UserId OR b.HasPrivilege>0)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)


GO


Adding BLOGDEV_Blog_GetTerm
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTerm]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTerm]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetTerm]
 @TermId INT,
 @ModuleId INT,
 @Locale NVARCHAR(10)
AS

SELECT
 t.*,
 (SELECT COUNT(*) FROM
  dbo.BLOGDEV_ContentItems_Tags tags
  INNER JOIN dbo.BLOGDEV_Blog_Posts posts ON posts.ContentItemId=tags.ContentItemID
  INNER JOIN dbo.BLOGDEV_Blog_Blogs blogs ON posts.BlogID=blogs.BlogID
  WHERE posts.Published=1 AND blogs.Published=1 AND blogs.ModuleID=@ModuleId AND tags.TermID=t.TermID
 ) AS TotalPosts
FROM
 dbo.BLOGDEV_Blog_TermList(@Locale) t
WHERE
 t.TermID=@TermId
 
GO


Adding BLOGDEV_Blog_GetTermLocalizations
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTermLocalizations]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTermLocalizations]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetTermLocalizations]
 @TermId INT
AS

SELECT
 tl.*
FROM
 dbo.BLOGDEV_Blog_TermLocalization tl
WHERE
 tl.TermID=@TermId
 
GO


Adding BLOGDEV_Blog_GetTermsByModule
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTermsByModule]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByModule]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByModule]
 @ModuleId INT,
 @Locale NVARCHAR(10)
AS

SELECT * FROM
(SELECT
 t.*,
 (SELECT COUNT(*) FROM
  dbo.BLOGDEV_ContentItems_Tags tags
  INNER JOIN dbo.BLOGDEV_Blog_Posts posts ON posts.ContentItemId=tags.ContentItemID
  INNER JOIN dbo.BLOGDEV_Blog_Blogs blogs ON posts.BlogID=blogs.BlogID
  WHERE posts.Published=1 AND blogs.Published=1 AND blogs.ModuleID=@ModuleId AND tags.TermID=t.TermID
 ) AS TotalPosts
FROM
 dbo.BLOGDEV_Blog_TermList(@Locale) t) AllTerms
WHERE
 AllTerms.TotalPosts>0
ORDER BY AllTerms.ViewOrder, AllTerms.Name
 
GO


Adding BLOGDEV_Blog_GetTermsByPost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTermsByPost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByPost]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByPost]
 @ContentItemId INT,
 @ModuleId INT,
 @Locale NVARCHAR(10)
AS

SELECT
 t.*,
 (SELECT COUNT(*) FROM
  dbo.BLOGDEV_ContentItems_Tags tags
  INNER JOIN dbo.BLOGDEV_Blog_Posts entries ON entries.ContentItemId=tags.ContentItemID
  INNER JOIN dbo.BLOGDEV_Blog_Blogs blogs ON entries.BlogID=blogs.BlogID
  WHERE entries.Published=1 AND blogs.Published=1 AND blogs.ModuleID=@ModuleId AND tags.TermID=t.TermID
 ) AS TotalPosts
FROM
 dbo.BLOGDEV_ContentItems_Tags tag
 INNER JOIN dbo.BLOGDEV_Blog_Posts p ON p.ContentItemId=tag.ContentItemID
 INNER JOIN dbo.BLOGDEV_Blog_Blogs b ON p.BlogID=b.BlogID
 INNER JOIN dbo.BLOGDEV_Blog_TermList(@Locale) t ON tag.TermID=t.TermID
WHERE
 tag.ContentItemID = @ContentItemId
 AND b.ModuleId = @ModuleId
ORDER BY t.ViewOrder, t.Name

GO


Adding BLOGDEV_Blog_GetTermsByVocabulary
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTermsByVocabulary]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByVocabulary]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByVocabulary]
 @ModuleId INT,
 @VocabularyId INT,
 @Locale NVARCHAR(10)
AS

SELECT
 t.*,
 (SELECT COUNT(*) FROM
  dbo.BLOGDEV_ContentItems_Tags tags
  INNER JOIN dbo.BLOGDEV_Blog_Posts posts ON posts.ContentItemId=tags.ContentItemID
  INNER JOIN dbo.BLOGDEV_Blog_Blogs blogs ON posts.BlogID=blogs.BlogID
  WHERE posts.Published=1 AND blogs.Published=1 AND blogs.ModuleID=@ModuleId AND tags.TermID=t.TermID
 ) AS TotalPosts
FROM
 dbo.BLOGDEV_Blog_TermList(@Locale) t
WHERE t.VocabularyID=@VocabularyId
ORDER BY t.ViewOrder, t.Name


GO


Adding BLOGDEV_Blog_GetUserPermissionsByModule
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetUserPermissionsByModule]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetUserPermissionsByModule]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE dbo.BLOGDEV_Blog_GetUserPermissionsByModule
 @ModuleID INT,
 @UserId INT
AS

SELECT p.PermissionId, MAX(CAST(p.AllowAccess AS INT)) HasPermission
FROM
(SELECT bp.*
 FROM dbo.BLOGDEV_Blog_BlogPermissions bp
 INNER JOIN dbo.BLOGDEV_Blog_Blogs b ON b.BlogID=bp.BlogId
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM dbo.BLOGDEV_UserRoles ur  
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE
  b.ModuleID=@ModuleId
  AND bp.AllowAccess=1
  AND (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4))) p
GROUP BY p.PermissionId
GO


Adding BLOGDEV_Blog_GetUsersByBlogPermission
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetUsersByBlogPermission]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetUsersByBlogPermission]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON

CREATE PROCEDURE [dbo].[BLOGDEV_Blog_GetUsersByBlogPermission]
 @PortalId INT,
 @BlogId INT,
 @PermissionId INT
AS

SELECT DISTINCT * FROM
(SELECT
 u.*
FROM
 dbo.BLOGDEV_vw_Users u
 INNER JOIN dbo.BLOGDEV_UserRoles ur ON ur.UserID=u.UserID
 INNER JOIN dbo.BLOGDEV_Blog_BlogPermissions bp ON bp.RoleId=ur.RoleID AND bp.PermissionId=@PermissionId
WHERE
 (ISNULL(ur.EffectiveDate, DATEADD(day, - 1, GETDATE())) < GETDATE()) AND (ISNULL(ur.ExpiryDate, DATEADD(day, 1, GETDATE())) > GETDATE())
UNION
SELECT
 u.*
FROM
 dbo.BLOGDEV_vw_Users u
 INNER JOIN dbo.BLOGDEV_Blog_BlogPermissions bp ON bp.UserId=u.UserID AND bp.PermissionId=@PermissionId) x
 


GO


Adding BLOGDEV_Blog_SearchPosts
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SearchPosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SearchPosts]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_SearchPosts]
 @ModuleId INT,
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @UserId INT,
 @UserIsAdmin BIT,
 @SearchText NVARCHAR(1000),
 @SearchTitle BIT,
 @SearchContents BIT,
 @Published INT,
 @LimitToLocale NVARCHAR(10),
 @EndDate DATETIME,
 @AuthorUserId INT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS

DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC dbo.BLOGDEV_CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;

DECLARE @Blogs TABLE (
 [BlogID] INT,
 [Locale] VARCHAR(10),
 [HasPrivilege] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
 b.Locale,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId IN (0,1,2)) AS [HasPrivilege]
FROM BLOGDEV_Blog_Blogs b
WHERE b.ModuleID=@ModuleId;

SELECT
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM dbo.BLOGDEV_Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 ((p.Title LIKE '%'+@SearchText+'%' AND @SearchTitle=1) OR (p.Content LIKE '%'+@SearchText+'%' AND @SearchContents=1))
 AND (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR @UserIsAdmin=1 OR p.CreatedByUserId=@UserId OR b.HasPrivilege>0)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;

SELECT COUNT (*) AS TotalRecords
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 ((p.Title LIKE '%'+@SearchText+'%' AND @SearchTitle=1) OR (p.Content LIKE '%'+@SearchText+'%' AND @SearchContents=1))
 AND (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR @UserIsAdmin=1 OR p.CreatedByUserId=@UserId OR b.HasPrivilege>0)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)


GO


Adding BLOGDEV_Blog_SearchPostsByTerm
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SearchPostsByTerm]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SearchPostsByTerm]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_SearchPostsByTerm]
 @ModuleId INT,
 @BlogID INT,
 @DisplayLocale NVARCHAR(10),
 @UserId INT,
 @UserIsAdmin BIT,
 @TermID INT,
 @SearchText NVARCHAR(1000),
 @SearchTitle BIT,
 @SearchContents BIT,
 @Published INT,
 @LimitToLocale NVARCHAR(10),
 @EndDate DATETIME,
 @AuthorUserId INT,
 @PageIndex INT = -1,
 @PageSize INT = 0,
 @OrderBy VARCHAR(100) = ''
AS

DECLARE 
 @PageLowerBound INT, 
 @PageUpperBound INT, 
 @RowsToReturn INT
EXEC dbo.BLOGDEV_CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output;

DECLARE @Blogs TABLE (
 [BlogID] INT,
 [Locale] VARCHAR(10),
 [HasPrivilege] INT);
INSERT INTO @Blogs
SELECT
 b.BlogId,
 b.Locale,
(SELECT COUNT(*)
 FROM BLOGDEV_Blog_BlogPermissions bp
 LEFT JOIN (SELECT ur.UserID, ur.RoleID  
    FROM BLOGDEV_UserRoles ur
    WHERE (ur.EffectiveDate <= GETDATE() OR ur.EffectiveDate IS NULL) AND (ur.ExpiryDate >= GETDATE() OR ur.ExpiryDate IS NULL)
    and ur.UserID=@UserID) r  ON r.RoleID=bp.RoleId
 WHERE (bp.UserID=@UserId OR (bp.UserID=-10 AND r.RoleID<>-4)) AND bp.BlogId=b.BlogID AND bp.PermissionId IN (0,1,2)) AS [HasPrivilege]
FROM BLOGDEV_Blog_Blogs b
WHERE b.ModuleID=@ModuleId;

SELECT
 Tbl.*,
 (SELECT COUNT(c.CommentID) FROM dbo.BLOGDEV_Blog_Comments c WHERE c.ContentItemId=tbl.ContentItemId AND c.Approved=1) AS NrComments
FROM
(SELECT
 p.*,
 ROW_NUMBER() OVER
 (ORDER BY
  CASE @OrderBy WHEN 'ALLOWCOMMENTS DESC' THEN p.[AllowComments] END DESC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'ALLOWCOMMENTS ASC' THEN p.[AllowComments] END ASC,
  CASE @OrderBy WHEN 'BLOGID DESC' THEN p.[BlogID] END DESC,
  CASE @OrderBy WHEN 'BLOGID' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'BLOGID ASC' THEN p.[BlogID] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID DESC' THEN p.[ContentItemId] END DESC,
  CASE @OrderBy WHEN 'CONTENTITEMID' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'CONTENTITEMID ASC' THEN p.[ContentItemId] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT DESC' THEN p.[Copyright] END DESC,
  CASE @OrderBy WHEN 'COPYRIGHT' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'COPYRIGHT ASC' THEN p.[Copyright] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID DESC' THEN p.[CreatedByUserId] END DESC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDBYUSERID ASC' THEN p.[CreatedByUserId] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE DESC' THEN p.[CreatedOnDate] END DESC,
  CASE @OrderBy WHEN 'CREATEDONDATE' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'CREATEDONDATE ASC' THEN p.[CreatedOnDate] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT DESC' THEN p.[DisplayCopyright] END DESC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'DISPLAYCOPYRIGHT ASC' THEN p.[DisplayCopyright] END ASC,
  CASE @OrderBy WHEN 'IMAGE DESC' THEN p.[Image] END DESC,
  CASE @OrderBy WHEN 'IMAGE' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'IMAGE ASC' THEN p.[Image] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID DESC' THEN p.[LastModifiedByUserID] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDBYUSERID ASC' THEN p.[LastModifiedByUserID] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE DESC' THEN p.[LastModifiedOnDate] END DESC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'LASTMODIFIEDONDATE ASC' THEN p.[LastModifiedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED DESC' THEN p.[Published] END DESC,
  CASE @OrderBy WHEN 'PUBLISHED' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHED ASC' THEN p.[Published] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE DESC' THEN p.[PublishedOnDate] END DESC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'PUBLISHEDONDATE ASC' THEN p.[PublishedOnDate] END ASC,
  CASE @OrderBy WHEN 'TITLE DESC' THEN p.[Title] END DESC,
  CASE @OrderBy WHEN 'TITLE' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'TITLE ASC' THEN p.[Title] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT DESC' THEN p.[ViewCount] END DESC,
  CASE @OrderBy WHEN 'VIEWCOUNT' THEN p.[ViewCount] END ASC,
  CASE @OrderBy WHEN 'VIEWCOUNT ASC' THEN p.[ViewCount] END ASC
) AS RowNum
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
 INNER JOIN dbo.BLOGDEV_ContentItems_Tags t ON t.ContentItemID=p.ContentItemId AND t.TermID=@TermID
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 ((p.Title LIKE '%'+@SearchText+'%' AND @SearchTitle=1) OR (p.Content LIKE '%'+@SearchText+'%' AND @SearchContents=1))
 AND (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR @UserIsAdmin=1 OR p.CreatedByUserId=@UserId OR b.HasPrivilege>0)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)
 ) AS Tbl
WHERE RowNum > @PageLowerBound AND RowNum < @PageUpperBound
ORDER BY RowNum;

SELECT COUNT (*) AS TotalRecords
FROM
 dbo.BLOGDEV_Blog_PostList(@DisplayLocale) p
 INNER JOIN dbo.BLOGDEV_ContentItems_Tags t ON t.ContentItemID=p.ContentItemId AND t.TermID=@TermID
 INNER JOIN @Blogs b ON b.BlogID=p.BlogID
WHERE
 ((p.Title LIKE '%'+@SearchText+'%' AND @SearchTitle=1) OR (p.Content LIKE '%'+@SearchText+'%' AND @SearchContents=1))
 AND (p.BlogID = @BlogID OR @BlogID=-1)
 AND (p.PublishedOnDate < @EndDate)
 AND (p.CreatedByUserId=@AuthorUserId OR @AuthorUserId=-1)
 AND (CAST(p.Published AS INT)=@Published OR @Published=-1)
 AND (p.Published=1 OR @UserIsAdmin=1 OR p.CreatedByUserId=@UserId OR b.HasPrivilege>0)
 AND (@LimitToLocale IS NULL OR ISNULL(p.Locale, b.Locale)=@LimitToLocale)


GO


Adding BLOGDEV_Blog_SetBlogLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SetBlogLocalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SetBlogLocalization]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_SetBlogLocalization]
 @BlogID INT,
 @Locale NVARCHAR(10),
 @Title NVARCHAR(255),
 @Description NVARCHAR(2000)
AS

IF @Title='' AND (@Description IS NULL OR @Description = '')
 DELETE FROM dbo.BLOGDEV_Blog_BlogLocalization
 WHERE BlogID = @BlogID AND [Locale] = @Locale
ELSE BEGIN
 IF EXISTS (SELECT BlogID FROM dbo.BLOGDEV_Blog_BlogLocalization WHERE BlogID = @BlogID AND [Locale] = @Locale)
  UPDATE dbo.BLOGDEV_Blog_BlogLocalization
   SET [Title] = @Title, [Description] = @Description
   WHERE BlogID = @BlogID AND [Locale] = @Locale
 ELSE
  INSERT INTO dbo.BLOGDEV_Blog_BlogLocalization
   (BlogID, [Locale], [Title], [Description])
   VALUES (@BlogID, @Locale, @Title, @Description)
END


GO


Adding BLOGDEV_Blog_SetPostLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SetPostLocalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SetPostLocalization]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_SetPostLocalization]
 @PostID INT,
 @Locale NVARCHAR(10),
 @Title NVARCHAR(255),
 @Summary NVARCHAR(MAX),
 @Content NVARCHAR(MAX),
 @UpdatedByUser INT
AS

DECLARE @LocalizedContentItemId INT
SET @LocalizedContentItemId = NULL
IF @Content=''
 BEGIN
  IF EXISTS (SELECT ContentItemId FROM dbo.BLOGDEV_Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale AND NOT LocalizedContentItemId IS NULL)
   DELETE FROM dbo.BLOGDEV_ContentItems
   WHERE ContentItemID IN (SELECT LocalizedContentItemId FROM dbo.BLOGDEV_Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale AND NOT LocalizedContentItemId IS NULL)
 END
ELSE
 BEGIN 
  DECLARE @ContentTypeID INT
  SET @ContentTypeID = (SELECT TOP 1 ContentTypeID FROM dbo.BLOGDEV_ContentItems WHERE ContentItemID=@PostID)
  DECLARE @ModuleId INT
  SET @ModuleId = (SELECT TOP 1 ModuleId FROM dbo.BLOGDEV_ContentItems WHERE ContentItemID=@PostID)
  IF EXISTS (SELECT ContentItemId FROM dbo.BLOGDEV_Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale AND NOT LocalizedContentItemId IS NULL)
   BEGIN
    SET @LocalizedContentItemId = (SELECT TOP 1 LocalizedContentItemId FROM dbo.BLOGDEV_Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale AND NOT LocalizedContentItemId IS NULL)
    EXEC dbo.BLOGDEV_UpdateContentItem @LocalizedContentItemId, @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @UpdatedByUser
   END
  ELSE
   BEGIN
    DECLARE @Tmp TABLE (ContentItemID INT)
    INSERT INTO @Tmp
    EXEC dbo.BLOGDEV_AddContentItem @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @UpdatedByUser;
    SET @LocalizedContentItemId = (SELECT TOP 1 ContentItemID FROM @Tmp)
   END
 END

IF @Title='' AND (@Summary IS NULL OR @Summary = '') AND (@Content IS NULL OR @Content = '')
 DELETE FROM dbo.BLOGDEV_Blog_PostLocalization
 WHERE ContentItemId = @PostID AND [Locale] = @Locale
ELSE
BEGIN
 IF EXISTS (SELECT ContentItemId FROM dbo.BLOGDEV_Blog_PostLocalization WHERE ContentItemId = @PostID AND [Locale] = @Locale)
  UPDATE dbo.BLOGDEV_Blog_PostLocalization
   SET [Title] = @Title, [Summary] = @Summary, [LocalizedContentItemId]=@LocalizedContentItemId
   WHERE ContentItemId = @PostID AND [Locale] = @Locale
 ELSE
  INSERT INTO dbo.BLOGDEV_Blog_PostLocalization
   (ContentItemId, [Locale], [Title], [Summary], [LocalizedContentItemId])
   VALUES (@PostID, @Locale, @Title, @Summary, @LocalizedContentItemId)
END


GO


Adding BLOGDEV_Blog_SetTerm
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SetTerm]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SetTerm]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_SetTerm]
 @TermID INT,
 @VocabularyID INT,
 @ParentTermID INT,
 @ViewOrder INT,
 @Name NVARCHAR(250),
 @Description NVARCHAR(2500),
 @CreatedByUserID INT
AS

IF @ParentTermID<1
SET @ParentTermID = NULL;

IF EXISTS (SELECT TermID FROM dbo.BLOGDEV_Taxonomy_Terms WHERE TermID = @TermID)
BEGIN
 IF ISNULL(@Description,'')=''
  SET @Description = (SELECT TOP 1 [Description] FROM dbo.BLOGDEV_Taxonomy_Terms WHERE TermID = @TermID);
 EXEC dbo.BLOGDEV_UpdateHeirarchicalTerm @TermID, @VocabularyID, @ParentTermID, @Name, @Description, 0, @CreatedByUserID;
END
ELSE
BEGIN
 DECLARE @ResultSet TABLE (NewTermID INT);
 INSERT INTO @ResultSet (NewTermID)
  EXEC dbo.BLOGDEV_AddHeirarchicalTerm @VocabularyID, @ParentTermID, @Name, @Description, 0, @CreatedByUserID;
 SET @TermID = (SELECT TOP 1 NewTermID FROM @ResultSet);
END

IF EXISTS (SELECT TermID FROM dbo.BLOGDEV_Blog_Terms WHERE TermID = @TermID)
BEGIN
 UPDATE dbo.BLOGDEV_Blog_Terms
 SET ViewOrder=@ViewOrder
 WHERE TermID=@TermID;
END
ELSE
BEGIN
 INSERT INTO dbo.BLOGDEV_Blog_Terms
  (TermID, ViewOrder)
 VALUES
  (@TermID, @ViewOrder);
END

SELECT @TermID

GO


Adding BLOGDEV_Blog_SetTermLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SetTermLocalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SetTermLocalization]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_SetTermLocalization]
 @TermID INT,
 @Locale NVARCHAR(10),
 @Name NVARCHAR(250),
 @Description NVARCHAR(2500)
AS

IF @Name='' AND (@Description IS NULL OR @Description = '')
 DELETE FROM dbo.BLOGDEV_Blog_TermLocalization
 WHERE TermID = @TermID AND [Locale] = @Locale
ELSE BEGIN
 IF EXISTS (SELECT TermID FROM dbo.BLOGDEV_Blog_TermLocalization WHERE TermID = @TermID AND [Locale] = @Locale)
  UPDATE dbo.BLOGDEV_Blog_TermLocalization
   SET [Name] = @Name, [Description] = @Description
   WHERE TermID = @TermID AND [Locale] = @Locale
 ELSE
  INSERT INTO dbo.BLOGDEV_Blog_TermLocalization
   (TermID, [Locale], [Name], [Description])
   VALUES (@TermID, @Locale, @Name, @Description)
END


GO


Adding BLOGDEV_Blog_UpdateBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_UpdateBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_UpdateBlog]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE dbo.BLOGDEV_Blog_UpdateBlog
 @BlogID INT, 
 @ModuleID INT, 
 @Copyright NVARCHAR (2000), 
 @Description NVARCHAR (2000), 
 @FullLocalization BIT, 
 @Image NVARCHAR (255), 
 @IncludeAuthorInFeed BIT, 
 @IncludeImagesInFeed BIT, 
 @Locale NVARCHAR (50), 
 @MustApproveGhostPosts BIT, 
 @OwnerUserId INT, 
 @PublishAsOwner BIT, 
 @Published BIT, 
 @Syndicated BIT, 
 @SyndicationEmail NVARCHAR (255), 
 @Title NVARCHAR (255), 
 @UpdatedByUser INT
AS

UPDATE dbo.BLOGDEV_Blog_Blogs SET
 [ModuleID] = @ModuleID,
 [Copyright] = @Copyright,
 [Description] = @Description,
 [FullLocalization] = @FullLocalization,
 [Image] = @Image,
 [IncludeAuthorInFeed] = @IncludeAuthorInFeed,
 [IncludeImagesInFeed] = @IncludeImagesInFeed,
 [LastModifiedByUserID] = @UpdatedByUser,
 [LastModifiedOnDate] = GETDATE(),
 [Locale] = @Locale,
 [MustApproveGhostPosts] = @MustApproveGhostPosts,
 [OwnerUserId] = @OwnerUserId,
 [PublishAsOwner] = @PublishAsOwner,
 [Published] = @Published,
 [Syndicated] = @Syndicated,
 [SyndicationEmail] = @SyndicationEmail,
 [Title] = @Title
WHERE
 [BlogID] = @BlogID
GO


Adding BLOGDEV_Blog_UpdateComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_UpdateComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_UpdateComment]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_UpdateComment]
 @Approved BIT, 
 @Author NVARCHAR (50), 
 @Comment NVARCHAR (MAX), 
 @CommentID INT, 
 @ContentItemId INT, 
 @Email NVARCHAR (255), 
 @ParentId INT, 
 @Website NVARCHAR (255), 
 @UpdatedByUser INT
AS

UPDATE dbo.BLOGDEV_Blog_Comments SET
 [Approved] = @Approved,
 [Author] = @Author,
 [Comment] = @Comment,
 [ContentItemId] = @ContentItemId,
 [Email] = @Email,
 [LastModifiedByUserID] = @UpdatedByUser,
 [LastModifiedOnDate] = GETDATE(),
 [ParentId] = @ParentId,
 [Website] = @Website
WHERE
 [CommentID] = @CommentID


GO


Adding BLOGDEV_Blog_UpdatePost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_UpdatePost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_UpdatePost]
GO


SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
CREATE PROCEDURE [dbo].[BLOGDEV_Blog_UpdatePost]
 @AllowComments BIT, 
 @BlogID INT, 
 @Content NVARCHAR(MAX),
 @ContentItemId INT, 
 @Copyright NVARCHAR (255), 
 @DisplayCopyright BIT, 
 @Image NVARCHAR (255), 
 @Locale VARCHAR (10), 
 @Published BIT, 
 @PublishedOnDate DATETIME, 
 @Summary NVARCHAR (MAX), 
 @TermIds NVARCHAR(1000),
 @Title NVARCHAR (255),
 @ViewCount INT,
 @UpdatedByUser INT
AS

DECLARE @ContentTypeID INT
SET @ContentTypeID = (SELECT TOP 1 ContentTypeID FROM dbo.BLOGDEV_ContentTypes WHERE ContentType='DNN_Blog_Post')
DECLARE @ModuleId INT
SET @ModuleId = (SELECT TOP 1 ModuleId FROM dbo.BLOGDEV_Blog_Blogs WHERE BlogID=@BlogID)

EXEC dbo.BLOGDEV_UpdateContentItem @ContentItemId, @Content, @ContentTypeID, -1, @ModuleId, NULL, 0, @UpdatedByUser

UPDATE dbo.BLOGDEV_Blog_Posts SET
 [AllowComments] = @AllowComments,
 [BlogID] = @BlogID,
 [Copyright] = @Copyright,
 [DisplayCopyright] = @DisplayCopyright,
 [Image] = @Image,
 [Locale] = @Locale,
 [Published] = @Published,
 [PublishedOnDate] = @PublishedOnDate,
 [Summary] = @Summary,
 [Title] = @Title,
 [ViewCount]=@ViewCount
WHERE
 [ContentItemId] = @ContentItemId;
 
IF @TermIds<>''
BEGIN
 DECLARE @ids TABLE (s NVARCHAR(512))
 INSERT INTO @ids (s) SELECT s FROM dbo.BLOGDEV_Blog_Split(@TermIds,';');

 DELETE FROM dbo.BLOGDEV_ContentItems_Tags
 WHERE ContentItemID=@ContentItemId;

 INSERT INTO dbo.BLOGDEV_ContentItems_Tags ([ContentItemID], [TermID])
 SELECT @ContentItemID, CAST(i.s AS INT)
 FROM @ids i;
END
GO


Finished Script Creation
Loaded E:\Webroot\BLOGDEV\web.config
ConnectionString: Server=(local);Database=BLOGDEV;uid=test;pwd=test;
ObjectQualifier : BLOGDEV_
DatabaseOwner   : dbo
FullPattern     : (?<owner>\[?dbo\]?\.)?\[?(?<prefix>\w*)(?<dnnqualifier>BLOGDEV_)(?<modqualifier>Blog_)(?<name>\w+)\]?|(?<owner>\[?dbo\]?\.)\[?(?<prefix>\w*)(?<dnnqualifier>BLOGDEV_)(?<modqualifier>Blog_)?(?<name>\w+)\]?|\[?(?<dnnqualifier>BLOGDEV_)(?<name>\w+)\]?

Create Uninstall Script
SPROCS
Adding BLOGDEV_Blog_AddBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddBlog]
GO


Adding BLOGDEV_Blog_AddBlogPermission
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddBlogPermission]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddBlogPermission]
GO


Adding BLOGDEV_Blog_AddComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddComment]
GO


Adding BLOGDEV_Blog_AddCommentKarma
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddCommentKarma]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddCommentKarma]
GO


Adding BLOGDEV_Blog_AddPost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddPost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddPost]
GO


Adding BLOGDEV_Blog_AddPostView
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_AddPostView]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_AddPostView]
GO


Adding BLOGDEV_Blog_ApproveComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_ApproveComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_ApproveComment]
GO


Adding BLOGDEV_Blog_DeleteBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_DeleteBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_DeleteBlog]
GO


Adding BLOGDEV_Blog_DeleteBlogPermissions
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_DeleteBlogPermissions]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_DeleteBlogPermissions]
GO


Adding BLOGDEV_Blog_DeleteComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_DeleteComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_DeleteComment]
GO


Adding BLOGDEV_Blog_DeletePost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_DeletePost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_DeletePost]
GO


Adding BLOGDEV_Blog_GetBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlog]
GO


Adding BLOGDEV_Blog_GetBlogCalendar
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlogCalendar]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogCalendar]
GO


Adding BLOGDEV_Blog_GetBlogLocalizations
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlogLocalizations]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogLocalizations]
GO


Adding BLOGDEV_Blog_GetBlogPermissionsByBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlogPermissionsByBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogPermissionsByBlog]
GO


Adding BLOGDEV_Blog_GetBlogsByModule
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetBlogsByModule]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetBlogsByModule]
GO


Adding BLOGDEV_Blog_GetComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetComment]
GO


Adding BLOGDEV_Blog_GetCommentsByContentItem
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetCommentsByContentItem]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetCommentsByContentItem]
GO


Adding BLOGDEV_Blog_GetCommentsByModuleId
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetCommentsByModuleId]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetCommentsByModuleId]
GO


Adding BLOGDEV_Blog_GetPost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPost]
GO


Adding BLOGDEV_Blog_GetPostLocalizations
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPostLocalizations]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPostLocalizations]
GO


Adding BLOGDEV_Blog_GetPosts
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPosts]
GO


Adding BLOGDEV_Blog_GetPostsByBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPostsByBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPostsByBlog]
GO


Adding BLOGDEV_Blog_GetPostsByTerm
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetPostsByTerm]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetPostsByTerm]
GO


Adding BLOGDEV_Blog_GetTerm
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTerm]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTerm]
GO


Adding BLOGDEV_Blog_GetTermLocalizations
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTermLocalizations]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTermLocalizations]
GO


Adding BLOGDEV_Blog_GetTermsByModule
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTermsByModule]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByModule]
GO


Adding BLOGDEV_Blog_GetTermsByPost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTermsByPost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByPost]
GO


Adding BLOGDEV_Blog_GetTermsByVocabulary
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetTermsByVocabulary]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetTermsByVocabulary]
GO


Adding BLOGDEV_Blog_GetUserPermissionsByModule
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetUserPermissionsByModule]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetUserPermissionsByModule]
GO


Adding BLOGDEV_Blog_GetUsersByBlogPermission
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_GetUsersByBlogPermission]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_GetUsersByBlogPermission]
GO


Adding BLOGDEV_Blog_SearchPosts
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SearchPosts]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SearchPosts]
GO


Adding BLOGDEV_Blog_SearchPostsByTerm
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SearchPostsByTerm]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SearchPostsByTerm]
GO


Adding BLOGDEV_Blog_SetBlogLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SetBlogLocalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SetBlogLocalization]
GO


Adding BLOGDEV_Blog_SetPostLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SetPostLocalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SetPostLocalization]
GO


Adding BLOGDEV_Blog_SetTerm
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SetTerm]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SetTerm]
GO


Adding BLOGDEV_Blog_SetTermLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_SetTermLocalization]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_SetTermLocalization]
GO


Adding BLOGDEV_Blog_UpdateBlog
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_UpdateBlog]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_UpdateBlog]
GO


Adding BLOGDEV_Blog_UpdateComment
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_UpdateComment]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_UpdateComment]
GO


Adding BLOGDEV_Blog_UpdatePost
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_UpdatePost]') AND type in (N'P', N'PC'))
DROP PROCEDURE [dbo].[BLOGDEV_Blog_UpdatePost]
GO


VIEWS
Adding BLOGDEV_vw_Blog_BlogPermissions
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_vw_Blog_BlogPermissions]'))
DROP VIEW [dbo].[BLOGDEV_vw_Blog_BlogPermissions]
GO


Adding BLOGDEV_vw_Blog_Blogs
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_vw_Blog_Blogs]'))
DROP VIEW [dbo].[BLOGDEV_vw_Blog_Blogs]
GO


Adding BLOGDEV_vw_Blog_Comments
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_vw_Blog_Comments]'))
DROP VIEW [dbo].[BLOGDEV_vw_Blog_Comments]
GO


Adding BLOGDEV_vw_Blog_Posts
IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_vw_Blog_Posts]'))
DROP VIEW [dbo].[BLOGDEV_vw_Blog_Posts]
GO


FUNCTIONS
Adding BLOGDEV_Blog_BlogList
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogList]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[BLOGDEV_Blog_BlogList]
GO


Adding BLOGDEV_Blog_PostList
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_PostList]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[BLOGDEV_Blog_PostList]
GO


Adding BLOGDEV_Blog_Split
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Split]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[BLOGDEV_Blog_Split]
GO


Adding BLOGDEV_Blog_TermList
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_TermList]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION [dbo].[BLOGDEV_Blog_TermList]
GO


TRIGGERS
STRUCTURE
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_BlogLocalization_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_BlogLocalization] DROP CONSTRAINT [FK_BLOGDEV_Blog_BlogLocalization_Blogs]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_BlogPermissions_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogPermissions]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_BlogPermissions] DROP CONSTRAINT [FK_BLOGDEV_Blog_BlogPermissions_Blogs]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Blogs_Modules]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Blogs]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Blogs] DROP CONSTRAINT [FK_BLOGDEV_Blog_Blogs_Modules]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_CommentReports_Comments]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_CommentKarmas]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_CommentKarmas] DROP CONSTRAINT [FK_BLOGDEV_Blog_CommentReports_Comments]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Comments]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Comments]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Comments] DROP CONSTRAINT [FK_BLOGDEV_Blog_Comments]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_PostLocalization_ContentItems]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_PostLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_PostLocalization] DROP CONSTRAINT [FK_BLOGDEV_Blog_PostLocalization_ContentItems]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Entries_Blogs]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Posts] DROP CONSTRAINT [FK_BLOGDEV_Blog_Entries_Blogs]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Entries_ContentItems]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Posts] DROP CONSTRAINT [FK_BLOGDEV_Blog_Entries_ContentItems]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_TermLocalization_Taxonomy_Terms]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_TermLocalization]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_TermLocalization] DROP CONSTRAINT [FK_BLOGDEV_Blog_TermLocalization_Taxonomy_Terms]
GO


IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_BLOGDEV_Blog_Terms_Terms]') AND parent_object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Terms]'))
ALTER TABLE [dbo].[BLOGDEV_Blog_Terms] DROP CONSTRAINT [FK_BLOGDEV_Blog_Terms_Terms]
GO


TABLES
Adding BLOGDEV_Blog_BlogLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogLocalization]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_BlogLocalization]
GO


Adding BLOGDEV_Blog_BlogPermissions
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_BlogPermissions]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_BlogPermissions]
GO


Adding BLOGDEV_Blog_Blogs
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Blogs]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_Blogs]
GO


Adding BLOGDEV_Blog_CommentKarmas
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_CommentKarmas]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_CommentKarmas]
GO


Adding BLOGDEV_Blog_Comments
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Comments]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_Comments]
GO


Adding BLOGDEV_Blog_PostLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_PostLocalization]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_PostLocalization]
GO


Adding BLOGDEV_Blog_Posts
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Posts]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_Posts]
GO


Adding BLOGDEV_Blog_TermLocalization
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_TermLocalization]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_TermLocalization]
GO


Adding BLOGDEV_Blog_Terms
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[BLOGDEV_Blog_Terms]') AND type in (N'U'))
DROP TABLE [dbo].[BLOGDEV_Blog_Terms]
GO


Finished Script Creation

BUILD SUCCEEDED

Total time: 3 seconds.

